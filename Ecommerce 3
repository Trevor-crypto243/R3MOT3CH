composer require livewire/livewire

livewire
Make a live wire component
php artisan make:livewire HomeComponent
<script src="{{ asset('assets/js/vendor/modernizr-3.6.0.min.js') }}"></script>
<link rel="stylesheet" href="{{asset('assets/css/custom.css')}}">
Create livewire components
declare routes for the live wire components
Use of components to access models and link with the views
Writing the functions in the live wire classes
using live wire with Pagination
creating a new live wire component for every event happening in the web app, or anything requiring database access

slug - computer science
https://itnext.io/whats-a-slug-f7e74b6c23e0

using session()->flash('message') to display messages after a function has been executed
displaying error messges with @erro @enderror
working with success messages
working with sessions

injecting scripts into components with @push
Sending variables to the views in the livewire component classes
using pagination to limit the number of products displayed

fetching data from relationships , belongs to


_______ADMIN AND USER AUTHENTICATION________
composer require laravel/breeze --dev
php artisan breeze:install
php artisan serve

______BUILD THE ASSETS______
npm install && npm run build


________ADMIN MIDDLEWARE_________
php artisan make:middleware AuthAdmin


______CUSTOMISING LOGIN AND REGISTER__________

_______MAKING THE PRODUCTS DYNAMIC_________
Factories, seeders
using faker to generate false entries
adding models to live wie components
using blade directives to loop over producst
Pagination, limiting number of products displayed
php artisan make:factory CategoryFactory -model=category  //creating the category factory
Making columns to be nullable

________CREATE PRODUCTS DETAIL PAGE________


__________SHOPPING CART___________
Install the shopping cart package
composer require hardevine/shoppingcart
configure the package
add Gloudemans\Shoppingcart\ShoppingcartServiceProvider::class in app.php config folder
create an alias

publish config file
php artisan vendor:publish --provider="Gloudemans\Shoppingcart\ShoppingcartServiceProvider" --tag="config"

updating cart quantity - increasing and decreasing amounts
deleting products from the cart

making cart icon dynamic


___________PRODUCT SHOPPINg____________
-Sorting products by category
-Displaying products according to the category
-Searching for products
-Adding price filters
-Adding product to wish list


_________REMOVE PRODUCT FROM WISH LIST_________
-Showing all wish listed products


__________ADMIN PAGE____________
-pagination
-displaying items in rows and columns
-Adding new category by admin
All admin routes are placed here
Route::middleware(['auth','authadmin'])->group(function () {
    Route::get('/admin/dashboard',AdminDashBoardComponent::class)->name('admin.dashboard');
    Route::get('/admin/categories',AdminCategoriesComponent::class)->name('admin.categories');
});







*************LIVE WIRE VS CONTROLLERS***********
If you need to make a request to the server, use Livewire.

If not, don't.

Livewire is a replacement for traditional AJAX requests. If your Livewire component doesn't need to get data from the server, it shouldn't be a Livewire component.
It’s components. You don’t make full pages in liverwire but dynamic components. Forms, search, tables, … stuff that can be changed. Everything else: Controller